# sentinel 端口设定
port 26379

# 监听地址
bind 0.0.0.0

# 格式：sentinel <option_name> <master_name> <option_value>；
# 这一行代表 sentinel 监控的 master 的名字叫做 mymaster , 地址为 127.0.0.1:6379；
# 行尾最后的一个2代表什么意思呢？
# 我们知道，网络是不可靠的，有时候一个 sentinel 会因为网络堵塞而误以为一个 master redis 已经死掉了，
# 当 sentinel 集群式，解决这个问题的方法就变得很简单，只需要多个 sentinel 互相沟通来确认某个 master 是否真的死了，
# 这个 2 代表，当集群中有 2 个 sentinel 认为 master 死了时，才能真正认为该 master 已经不可用了。
# 監控的 redis master host 與 port，並指定兩個 sentinel 同意決定
sentinel monitor mymaster1 redis-master1 6379 2

# sentinel 会向 master 发送心跳 PING 来确认 master 是否存活，
# 如果 master 在 “一定时间范围” 内不回应 PONG 或者是回复了一个错误消息，
# 那么这个 sentinel 会主观地(单方面地)认为这个 master 已经不可用了(subjectively down, 也简称为SDOWN)。
# 而这个 down-after-milliseconds 就是用来指定这个“一定时间范围”的，默认单位是毫秒，默认30秒。
# 无法连线 3000 毫秒，判定为离线
sentinel down-after-milliseconds mymaster1 3000

# 在发生 failover 主备切换时，这个选项指定了最多可以有多少个 slave 同时对新的 master 进行同步，
# 这个数字越小，完成 failover 所需的时间就越长，
# 但是如果这个数字越大，就意味着越多的 slave 因为 replication 而不可用。
# 可以通过将这个值设为 1 来保证每次只有一个 slave 处于不能处理命令请求的状态。
# 同时可以从 master 拉取资料 slave 个数为 1
sentinel parallel-syncs mymaster1 1

# failover 过期时间，当 failover 开始后，在此时间内仍然没有触发任何 failover 操作，
# 当前 sentinel 将会认为此次 failover 失败。默认 180 秒，即 3minutes.
# sentinel 执行 failover 失败 10000 毫秒
sentinel failover-timeout mymaster1 10000

# 设定 master 节点2 
sentinel monitor mymaster2 redis-master2 6379 2
sentinel down-after-milliseconds mymaster2 3000
sentinel parallel-syncs mymaster2 1
sentinel failover-timeout mymaster2 10000

# 设定 master 节点3
sentinel monitor mymaster3 redis-master3 6379 2
sentinel down-after-milliseconds mymaster3 3000
sentinel parallel-syncs mymaster3 1
sentinel failover-timeout mymaster3 10000

# 设置连 master 和 slaves 验证密码，在监控 redis 实例时很有用
#sentinel auth-pass mymaster xxxxxxx
